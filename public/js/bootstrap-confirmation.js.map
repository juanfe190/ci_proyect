{"version":3,"sources":["bootstrap-confirmation.js"],"names":[],"mappingsfile":"bootstrap-confirmation.js","sourcesContent":["/*!\n * Bootstrap Confirmation\n * Copyright 2013 Nimit Suwannagate <ethaizone@hotmail.com>\n * Copyright 2014 Damien \"Mistic\" Sorel <http://www.strangeplanet.fr>\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n */\n\n(function ($) {\n  'use strict';\n\n  // Confirmation extends popover.js\n  if (!$.fn.popover) throw new Error('Confirmation requires popover.js');\n\n  // CONFIRMATION PUBLIC CLASS DEFINITION\n  // ===============================\n  var Confirmation = function (element, options) {\n    this.init('confirmation', element, options);\n\n    var that = this;\n\n    if (!this.options.selector) {\n      // get existing href and target\n      if (this.$element.attr('href')) {\n        this.options.href = this.$element.attr('href');\n        this.$element.removeAttr('href');\n        if (this.$element.attr('target')) {\n          this.options.target = this.$element.attr('target');\n        }\n      }\n\n      // cancel original event\n      this.$element.on(that.options.trigger, function(e, ack) {\n        if (!ack) {\n          e.preventDefault();\n          e.stopPropagation();\n          e.stopImmediatePropagation();\n        }\n      });\n\n      // trigger original event on confirm\n      this.$element.on('confirmed.bs.confirmation', function(e) {\n        $(this).trigger(that.options.trigger, [true]);\n      });\n\n      // manage singleton\n      this.$element.on('show.bs.confirmation', function(e) {\n        if (that.options.singleton) {\n          // close all other popover already initialized\n          $(that.options._selector).not($(this)).filter(function() {\n            return $(this).data('bs.confirmation') !== undefined;\n          }).confirmation('hide');\n        }\n      });\n    }\n\n    if (!this.options._isDelegate) {\n      // manage popout\n      this.eventBody = false;\n      this.uid = this.$element[0].id || this.getUID('group_');\n\n      this.$element.on('shown.bs.confirmation', function(e) {\n        if (that.options.popout && !that.eventBody) {\n          var $this = $(this);\n          that.eventBody = $('body').on('click.bs.confirmation.'+that.uid, function(e) {\n            if ($(that.options._selector).is(e.target)) {\n              return;\n            }\n  \n            // close all popover already initialized\n            $(that.options._selector).filter(function() {\n              return $(this).data('bs.confirmation') !== undefined;\n            }).confirmation('hide');\n\n            $('body').off('click.bs.'+that.uid);\n            that.eventBody = false;\n          });\n        }\n      });\n    }\n  };\n\n  Confirmation.DEFAULTS = $.extend({}, $.fn.popover.Constructor.DEFAULTS, {\n    placement: 'top',\n    title: 'Are you sure?',\n    html: true,\n    href: false,\n    popout: false,\n    singleton: false,\n    target: '_self',\n    onConfirm: $.noop,\n    onCancel: $.noop,\n    btnOkClass: 'btn-xs btn-primary',\n    btnOkIcon: 'glyphicon glyphicon-ok',\n    btnOkLabel: 'Yes',\n    btnCancelClass: 'btn-xs btn-default',\n    btnCancelIcon: 'glyphicon glyphicon-remove',\n    btnCancelLabel: 'No',\n    template:\n      '<div class=\"popover confirmation\">' +\n        '<div class=\"arrow\"></div>' +\n        '<h3 class=\"popover-title\"></h3>' +\n        '<div class=\"popover-content text-center\">'+\n          '<div class=\"btn-group\">'+\n            '<a class=\"btn\" data-apply=\"confirmation\"></a>'+\n            '<a class=\"btn\" data-dismiss=\"confirmation\"></a>'+\n          '</div>'+\n        '</div>'+\n      '</div>'\n  });\n\n  Confirmation.prototype = $.extend({}, $.fn.popover.Constructor.prototype);\n\n  Confirmation.prototype.constructor = Confirmation;\n\n  Confirmation.prototype.getDefaults = function () {\n    return Confirmation.DEFAULTS;\n  };\n\n  // custom init keeping trace of selectors\n  Confirmation.prototype.init = function(type, element, options) {\n    $.fn.popover.Constructor.prototype.init.call(this, type, element, options);\n\n    this.options._isDelegate = false;\n    if (options.selector) { // container of buttons\n      this.options._selector = this._options._selector = options._root_selector +' '+ options.selector;\n    }\n    else if (options._selector) { // children of container\n      this.options._selector = options._selector;\n      this.options._isDelegate = true;\n    }\n    else { // standalone\n      this.options._selector = options._root_selector;\n    }\n  };\n\n  Confirmation.prototype.setContent = function () {\n    var that = this,\n        $tip = this.tip(),\n        o = this.options;\n\n    $tip.find('.popover-title')[o.html ? 'html' : 'text'](this.getTitle());\n\n    // configure 'ok' button\n    $tip.find('[data-apply=\"confirmation\"]')\n      .addClass(o.btnOkClass)\n      .html(o.btnOkLabel)\n      .prepend($('<i></i>').addClass(o.btnOkIcon), ' ')\n      .off('click')\n      .one('click', function(e) {\n        that.getOnConfirm.call(that).call(that.$element);\n        that.$element.trigger('confirmed.bs.confirmation');\n        that.$element.confirmation('hide');\n      });\n\n    // add href to confirm button if needed\n    if (o.href && o.href != \"#\") {\n      $tip.find('[data-apply=\"confirmation\"]').attr({\n        href: o.href,\n        target: o.target\n      });\n    }\n\n    // configure 'cancel' button\n    $tip.find('[data-dismiss=\"confirmation\"]')\n      .addClass(o.btnCancelClass)\n      .html(o.btnCancelLabel)\n      .prepend($('<i></i>').addClass(o.btnCancelIcon), ' ')\n      .off('click')\n      .one('click', function(e) {\n        that.getOnCancel.call(that).call(that.$element);\n        that.$element.trigger('canceled.bs.confirmation');\n        that.$element.confirmation('hide');\n      });\n\n    $tip.removeClass('fade top bottom left right in');\n\n    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n    // this manually by checking the contents.\n    if (!$tip.find('.popover-title').html()) {\n      $tip.find('.popover-title').hide();\n    }\n  };\n\n  Confirmation.prototype.getOnConfirm = function() {\n    if (this.$element.attr('data-on-confirm')) {\n      return getFunctionFromString(this.$element.attr('data-on-confirm'));\n    }\n    else {\n      return this.options.onConfirm;\n    }\n  };\n\n  Confirmation.prototype.getOnCancel = function() {\n    if (this.$element.attr('data-on-cancel')) {\n      return getFunctionFromString(this.$element.attr('data-on-cancel'));\n    }\n    else {\n      return this.options.onCancel;\n    }\n  };\n\n  /*\n   * Generates an anonymous function from a function name\n   * function name may contain dots (.) to navigate through objects\n   * root context is window\n   */\n  function getFunctionFromString(functionName) {\n    var context = window,\n        namespaces = functionName.split('.'),\n        func = namespaces.pop();\n\n    for (var i=0, l=namespaces.length; i<l; i++) {\n      context = context[namespaces[i]];\n    }\n\n    return function() {\n      context[func].call(this);\n    };\n  }\n\n\n  // CONFIRMATION PLUGIN DEFINITION\n  // =========================\n\n  var old = $.fn.confirmation;\n\n  $.fn.confirmation = function (option) {\n    var options = (typeof option == 'object' && option) || {};\n    options._root_selector = this.selector;\n\n    return this.each(function () {\n      var $this = $(this),\n          data  = $this.data('bs.confirmation');\n\n      if (!data && option == 'destroy') {\n        return;\n      }\n      if (!data) {\n        $this.data('bs.confirmation', (data = new Confirmation(this, options)));\n      }\n      if (typeof option == 'string') {\n        data[option]();\n      }\n    });\n  };\n\n  $.fn.confirmation.Constructor = Confirmation;\n\n\n  // CONFIRMATION NO CONFLICT\n  // ===================\n\n  $.fn.confirmation.noConflict = function () {\n    $.fn.confirmation = old;\n    return this;\n  };\n\n}(jQuery));\n"]}